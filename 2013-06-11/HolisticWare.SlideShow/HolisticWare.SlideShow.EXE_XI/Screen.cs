// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Xamarin.Media;
using System.Threading.Tasks;

namespace HolisticWare.SlideShow.EXE
{
	public partial class Screen : UIViewController
	{
		public Screen (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			buttonBoxBrowsePickTake.Clicked += ChooseOrTakePicture;

		}

		void ChooseOrTakePicture (object sender, EventArgs e)
		{
			UIAlertView alert = new UIAlertView ("Media Chooser", "Camera Or Library", null, "Cancel", "Camera", "Library");
			alert.Show ();

			alert.Clicked += MediaChooser;
		}

		void MediaChooser (object sender, UIButtonEventArgs e)
		{
			if (e.ButtonIndex == 1) {

				System.Console.WriteLine ("Camera");

				var picker = new MediaPicker ();

				if (!picker.IsCameraAvailable)
					Console.WriteLine ("No camera!");

				else 
				{
					picker.TakePhotoAsync (new StoreCameraMediaOptions {
						Name = "test.jpg",
						Directory = "MediaPickerSample"
					}).ContinueWith (t => {

						if (t.IsCanceled) 
						{
							Console.WriteLine ("User canceled");
							return;
						}

						Console.WriteLine (t.Result.Path);
						imageView.Image = new UIImage(t.Result.Path);

					}, TaskScheduler.FromCurrentSynchronizationContext());
				}



			} 
			else if (e.ButtonIndex == 2) 
			{

				System.Console.WriteLine ("Library");

				var picker = new MediaPicker ();
				//           new MediaPicker (this); on Android

				picker.PickPhotoAsync()
					.ContinueWith (t => {

						if (t.IsCanceled) 
						{
							Console.WriteLine ("User canceled");
							return;
						}

						Console.WriteLine (t.Result.Path);
						imageView.Image = new UIImage(t.Result.Path);

					}, TaskScheduler.FromCurrentSynchronizationContext());
			}

		}
	}
}
